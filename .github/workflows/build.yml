name: Build ZuppiCalling Executable

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Install Chocolatey and MSYS2
    - name: Install Chocolatey and MSYS2
      run: |
        choco install -y msys2
        echo "C:\tools\msys64\usr\bin" >> $GITHUB_ENV
        echo "C:\tools\msys64\mingw64\bin" >> $GITHUB_ENV

    # Step 3: Update MSYS2 and Install Dependencies
    - name: Update MSYS2 and Install Dependencies
      shell: bash
      run: |
        export PATH=/c/tools/msys64/usr/bin:/c/tools/msys64/mingw64/bin:$PATH
        pacman --noconfirm -Syuu
        pacman --noconfirm -S base-devel mingw-w64-x86_64-toolchain \
            mingw-w64-x86_64-speex mingw-w64-x86_64-libsrtp mingw-w64-x86_64-libwinpthread

    # Step 4: Clean Existing PJSIP Directory
    - name: Clean Existing PJSIP Directory
      shell: bash
      run: |
        if [ -d "pjproject" ]; then rm -rf pjproject; fi

    # Step 5: Clone and Configure PJSIP
    - name: Clone and Configure PJSIP
      shell: bash
      run: |
        git clone https://github.com/pjsip/pjproject.git
        cd pjproject
        curl -o config.guess https://git.savannah.gnu.org/cgit/config.git/plain/config.guess
        curl -o config.sub https://git.savannah.gnu.org/cgit/config.git/plain/config.sub
        echo "#define PJ_HAS_NETINET_IP_H 0" > pjlib/include/pj/config_site.h
        ./aconfigure \
          --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --prefix=$(pwd)/install \
          CFLAGS="-I/mingw64/include -I$(pwd)/pjlib/include" \
          LDFLAGS="-L/mingw64/lib"

    # Step 6: Workaround for WebRTC Dependency
    - name: Fix WebRTC Dependency
      shell: bash
      run: |
        cd pjproject/third_party/build
        if [ -d "webrtc" ]; then
          rm -rf webrtc
        fi
        mkdir -p webrtc
        echo -e "#!/bin/bash\nexit 0" > webrtc/depend.sh
        chmod +x webrtc/depend.sh

    # Step 7: Build PJSIP
    - name: Build PJSIP
      shell: bash
      run: |
        cd pjproject
        make dep || true  # Skip errors from unnecessary dependencies
        make
        make install

    # Step 8: Configure and Build ZuppiCalling
    - name: Configure and Build ZuppiCalling
      run: |
        mkdir build
        cd build
        cmake -A x64 -DPJSIP_INCLUDE_DIR=../pjproject/install/include -DPJSIP_LIBRARY=../pjproject/install/lib ..
        cmake --build . --config Release

    # Step 9: Upload Built Executable
    - name: Upload Executable
      uses: actions/upload-artifact@v3
      with:
        name: ZuppiCalling-Executable
        path: build/Release/ZuppiCalling.exe
